==571== Memcheck, a memory error detector
==571== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==571== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==571== Command: ./Tests 14
==571== 
==571== error calling PR_SET_PTRACER, vgdb might block
==571== Conditional jump or move depends on uninitialised value(s)
==571==    at 0x10A036: PersonPrintf (Person.c:55)
==571==    by 0x10A979: PersonSetPrint (PersonSet.c:66)
==571==    by 0x1097AF: main (Tests.c:63)
==571== 
==571== Conditional jump or move depends on uninitialised value(s)
==571==    at 0x10A036: PersonPrintf (Person.c:55)
==571==    by 0x10A979: PersonSetPrint (PersonSet.c:66)
==571==    by 0x109821: main (Tests.c:68)
==571== 
==571== Conditional jump or move depends on uninitialised value(s)
==571==    at 0x10A036: PersonPrintf (Person.c:55)
==571==    by 0x10A979: PersonSetPrint (PersonSet.c:66)
==571==    by 0x109893: main (Tests.c:73)
==571== 
==571== Use of uninitialised value of size 8
==571==    at 0x10A9DD: search (PersonSet.c:77)
==571==    by 0x10AB65: PersonSetRemove (PersonSet.c:121)
==571==    by 0x10993D: main (Tests.c:81)
==571== 
==571== Invalid read of size 4
==571==    at 0x10A9DD: search (PersonSet.c:77)
==571==    by 0x10AB65: PersonSetRemove (PersonSet.c:121)
==571==    by 0x10993D: main (Tests.c:81)
==571==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==571== 
==571== 
==571== Process terminating with default action of signal 11 (SIGSEGV)
==571==  Access not within mapped region at address 0x0
==571==    at 0x10A9DD: search (PersonSet.c:77)
==571==    by 0x10AB65: PersonSetRemove (PersonSet.c:121)
==571==    by 0x10993D: main (Tests.c:81)
==571==  If you believe this happened as a result of a stack
==571==  overflow in your program's main thread (unlikely but
==571==  possible), you can try to increase the size of the
==571==  main thread stack using the --main-stacksize= flag.
==571==  The main thread stack size used in this run was 8388608.

1) PersonCreate---

2) PersonSetCreate---
PersonSetSize(ps1) -> 1

3) PersonSetAdd---
ps1 -> {
NULL;
(4, Silva, Carlos, 1999-08-31);
(3, Guedes, Paulo, 2003-12-31);
(2, Silva, Maria, 2003-12-30);
(3, Guedes, Paulo, 2003-12-31);
(4, Silva, Carlos, 1999-08-31);
(9, Santos, Tiago, 1996-06-13);
(8, Costa, Olga, 1967-02-29);
}(size=8, capacity=8)
ps2 -> {
NULL;
(1, Maia, Eva, 1977-10-20);
(10, Santos, Sara, 2007-03-01);
(7, Maia, Vitor, 1969-02-28);
(9, Santos, Tiago, 1996-06-13);
(5, Matos, Filipe, 2001-01-01);
}(size=6, capacity=8)
ps3 -> {
NULL;
(1, Maia, Eva, 1977-10-20);
(1, Maia, Eva, 1977-10-20);
(7, Maia, Vitor, 1969-02-28);
}(size=4, capacity=4)

4) PersonSetRemove---
id -> 6
p = PersonSetRemove(ps1, id) -> ==571== 
==571== HEAP SUMMARY:
==571==     in use at exit: 890 bytes in 26 blocks
==571==   total heap usage: 29 allocs, 3 frees, 5,178 bytes allocated
==571== 
==571== LEAK SUMMARY:
==571==    definitely lost: 0 bytes in 0 blocks
==571==    indirectly lost: 0 bytes in 0 blocks
==571==      possibly lost: 0 bytes in 0 blocks
==571==    still reachable: 890 bytes in 26 blocks
==571==         suppressed: 0 bytes in 0 blocks
==571== Rerun with --leak-check=full to see details of leaked memory
==571== 
==571== Use --track-origins=yes to see where uninitialised values come from
==571== For lists of detected and suppressed errors, rerun with: -s
==571== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
